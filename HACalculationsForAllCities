#trying to recreate the HA stuff I did thru SAS and R
#local

#trying to recreate the HA stuff I did thru SAS and R
#local

ALLCITIES$Group200 <- (ALLCITIES$B19001_017/ALLCITIES$B19001_001)
ALLCITIES$Group150_200 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016)/ALLCITIES$B19001_001;
ALLCITIES$Group125_150 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015)/ALLCITIES$B19001_001;
ALLCITIES$Group100_125 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014)/ALLCITIES$B19001_001;
ALLCITIES$Group75_100 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013)/ALLCITIES$B19001_001;
ALLCITIES$Group60_75 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012)/ALLCITIES$B19001_001;
ALLCITIES$Group50_60 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011)/ALLCITIES$B19001_001;
ALLCITIES$Group45_50 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011 + ALLCITIES$B19001_010)/ALLCITIES$B19001_001;
ALLCITIES$Group40_45 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011 + ALLCITIES$B19001_010 + ALLCITIES$B19001_009)/ALLCITIES$B19001_001;
ALLCITIES$Group35_40 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011 + ALLCITIES$B19001_010 + ALLCITIES$B19001_009 + ALLCITIES$B19001_008)/ALLCITIES$B19001_001;
ALLCITIES$Group30_35 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011 + ALLCITIES$B19001_010 + ALLCITIES$B19001_009 + ALLCITIES$B19001_008 + ALLCITIES$B19001_007)/ALLCITIES$B19001_001;
ALLCITIES$Group25_30 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011 + ALLCITIES$B19001_010 + ALLCITIES$B19001_009 + ALLCITIES$B19001_008 + ALLCITIES$B19001_007 + ALLCITIES$B19001_006)/ALLCITIES$B19001_001;
ALLCITIES$Group20_25 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011 + ALLCITIES$B19001_010 + ALLCITIES$B19001_009 + ALLCITIES$B19001_008 + ALLCITIES$B19001_007 + ALLCITIES$B19001_006 + ALLCITIES$B19001_005)/ALLCITIES$B19001_001;
ALLCITIES$Group15_20 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011 + ALLCITIES$B19001_010 + ALLCITIES$B19001_009 + ALLCITIES$B19001_008 + ALLCITIES$B19001_007 + ALLCITIES$B19001_006 + ALLCITIES$B19001_005 + ALLCITIES$B19001_004)/ALLCITIES$B19001_001;
ALLCITIES$Group10_15 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011 + ALLCITIES$B19001_010 + ALLCITIES$B19001_009 + ALLCITIES$B19001_008 + ALLCITIES$B19001_007 + ALLCITIES$B19001_006 + ALLCITIES$B19001_005 + ALLCITIES$B19001_004 + ALLCITIES$B19001_003)/ALLCITIES$B19001_001;
ALLCITIES$Group10 <- (ALLCITIES$B19001_017 + ALLCITIES$B19001_016 + ALLCITIES$B19001_015 + ALLCITIES$B19001_014 + ALLCITIES$B19001_013 + ALLCITIES$B19001_012 + ALLCITIES$B19001_011 + ALLCITIES$B19001_010 + ALLCITIES$B19001_009 + ALLCITIES$B19001_008 + ALLCITIES$B19001_007 + ALLCITIES$B19001_006 + ALLCITIES$B19001_005 + ALLCITIES$B19001_004 + ALLCITIES$B19001_003 + ALLCITIES$B19001_002)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup10 <- (ALLCITIES$B19001_002)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup10_15 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup15_20 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003 + ALLCITIES$B19001_004)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup20_25 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003 + ALLCITIES$B19001_004 + ALLCITIES$B19001_005)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup25_30 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003 + ALLCITIES$B19001_004 + ALLCITIES$B19001_005 + ALLCITIES$B19001_006)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup30_35 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003 + ALLCITIES$B19001_004 + ALLCITIES$B19001_005 + ALLCITIES$B19001_006 + ALLCITIES$B19001_007)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup35_40 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003 + ALLCITIES$B19001_004 + ALLCITIES$B19001_005 + ALLCITIES$B19001_006 + ALLCITIES$B19001_007 + ALLCITIES$B19001_008)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup40_45 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003 + ALLCITIES$B19001_004 + ALLCITIES$B19001_005 + ALLCITIES$B19001_006 + ALLCITIES$B19001_007 + ALLCITIES$B19001_008 + ALLCITIES$B19001_009)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup45_50 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003 + ALLCITIES$B19001_004 + ALLCITIES$B19001_005 + ALLCITIES$B19001_006 + ALLCITIES$B19001_007 + ALLCITIES$B19001_008 + ALLCITIES$B19001_009 + ALLCITIES$B19001_010)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup50_60 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003 + ALLCITIES$B19001_004 + ALLCITIES$B19001_005 + ALLCITIES$B19001_006 + ALLCITIES$B19001_007 + ALLCITIES$B19001_008 + ALLCITIES$B19001_009 + ALLCITIES$B19001_010 + ALLCITIES$B19001_011)/ALLCITIES$B19001_001;
ALLCITIES$ReverseGroup60_75 <- (ALLCITIES$B19001_002 + ALLCITIES$B19001_003 + ALLCITIES$B19001_004 + ALLCITIES$B19001_005 + ALLCITIES$B19001_006 + ALLCITIES$B19001_007 + ALLCITIES$B19001_008 + ALLCITIES$B19001_009 + ALLCITIES$B19001_010 + ALLCITIES$B19001_011 + ALLCITIES$B19001_012)/ALLCITIES$B19001_001;

ALLCITIES$LocalEnt200 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group200)*log2(1/(ALLCITIES$Group200)) + 
                                                   (1-(ALLCITIES$Group200))*log2(1/(1-(ALLCITIES$Group200))))

ALLCITIES$LocalEnt150_200 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group150_200)*log2(1/(ALLCITIES$Group150_200)) + 
                                                       (1-(ALLCITIES$Group150_200))*log2(1/(1-(ALLCITIES$Group150_200))))

ALLCITIES$LocalEnt125_150 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group125_150)*log2(1/(ALLCITIES$Group125_150)) + 
                                                       (1-(ALLCITIES$Group125_150))*log2(1/(1-(ALLCITIES$Group125_150))))

ALLCITIES$LocalEnt100_125 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group100_125)*log2(1/(ALLCITIES$Group100_125)) + 
                                                       (1-(ALLCITIES$Group100_125))*log2(1/(1-(ALLCITIES$Group100_125))))

ALLCITIES$LocalEnt75_100 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group75_100)*log2(1/(ALLCITIES$Group75_100)) + 
                                                      (1-(ALLCITIES$Group75_100))*log2(1/(1-(ALLCITIES$Group75_100))))

ALLCITIES$LocalEnt60_75 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group60_75)*log2(1/(ALLCITIES$Group60_75)) + 
                                                     (1-(ALLCITIES$Group60_75))*log2(1/(1-(ALLCITIES$Group60_75))))

ALLCITIES$LocalEnt50_60 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group50_60)*log2(1/(ALLCITIES$Group50_60)) + 
                                                     (1-(ALLCITIES$Group50_60))*log2(1/(1-(ALLCITIES$Group50_60))))

ALLCITIES$LocalEnt45_50 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group45_50)*log2(1/(ALLCITIES$Group45_50)) + 
                                                     (1-(ALLCITIES$Group45_50))*log2(1/(1-(ALLCITIES$Group45_50))))

ALLCITIES$LocalEnt40_45 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group40_45)*log2(1/(ALLCITIES$Group40_45)) + 
                                                     (1-(ALLCITIES$Group40_45))*log2(1/(1-(ALLCITIES$Group40_45))))

ALLCITIES$LocalEnt35_40 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group35_40)*log2(1/(ALLCITIES$Group35_40)) + 
                                                     (1-(ALLCITIES$Group35_40))*log2(1/(1-(ALLCITIES$Group35_40))))

ALLCITIES$LocalEnt30_35 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group30_35)*log2(1/(ALLCITIES$Group30_35)) + 
                                                     (1-(ALLCITIES$Group30_35))*log2(1/(1-(ALLCITIES$Group30_35))))

ALLCITIES$LocalEnt25_30 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group25_30)*log2(1/(ALLCITIES$Group25_30)) + 
                                                     (1-(ALLCITIES$Group25_30))*log2(1/(1-(ALLCITIES$Group25_30))))

ALLCITIES$LocalEnt20_25 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group20_25)*log2(1/(ALLCITIES$Group20_25)) + 
                                                     (1-(ALLCITIES$Group20_25))*log2(1/(1-(ALLCITIES$Group20_25))))

ALLCITIES$LocalEnt15_20 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group15_20)*log2(1/(ALLCITIES$Group15_20)) + 
                                                     (1-(ALLCITIES$Group15_20))*log2(1/(1-(ALLCITIES$Group15_20))))

ALLCITIES$LocalEnt10_15 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group10_15)*log2(1/(ALLCITIES$Group10_15)) + 
                                                     (1-(ALLCITIES$Group10_15))*log2(1/(1-(ALLCITIES$Group10_15))))

ALLCITIES$LocalEnt10 <- ALLCITIES$B19001_001 * ((ALLCITIES$Group10)*log2(1/(ALLCITIES$Group10)) + 
                                                  (1-(ALLCITIES$Group10))*log2(1/(1-(ALLCITIES$Group10))))

ALLCITIES$ReverseLocalEnt10 <- ALLCITIES$B19001_001 * ((ALLCITIES$ReverseGroup10)*log2(1/(ALLCITIES$ReverseGroup10)) + 
                                                         (1-(ALLCITIES$ReverseGroup10))*log2(1/(1-(ALLCITIES$ReverseGroup10))))

ALLCITIES$ReverseLocalEnt10_15 <- ALLCITIES$B19001_001 * ((ALLCITIES$ReverseGroup10_15)*log2(1/(ALLCITIES$ReverseGroup10_15)) + 
                                                            (1-(ALLCITIES$ReverseGroup10_15))*log2(1/(1-(ALLCITIES$ReverseGroup10_15))))

ALLCITIES$ReverseLocalEnt15_20 <- ALLCITIES$B19001_001 * ((ALLCITIES$ReverseGroup15_20)*log2(1/(ALLCITIES$ReverseGroup15_20)) + 
                                                            (1-(ALLCITIES$ReverseGroup15_20))*log2(1/(1-(ALLCITIES$ReverseGroup15_20))))

ALLCITIES$ReverseLocalEnt20_25 <- ALLCITIES$B19001_001 * ((ALLCITIES$ReverseGroup20_25)*log2(1/(ALLCITIES$ReverseGroup20_25)) + 
                                                            (1-(ALLCITIES$ReverseGroup20_25))*log2(1/(1-(ALLCITIES$ReverseGroup20_25))))

ALLCITIES$ReverseLocalEnt25_30 <- ALLCITIES$B19001_001 * ((ALLCITIES$ReverseGroup25_30)*log2(1/(ALLCITIES$ReverseGroup25_30)) + 
                                                            (1-(ALLCITIES$ReverseGroup25_30))*log2(1/(1-(ALLCITIES$ReverseGroup25_30))))

ALLCITIES$ReverseLocalEnt30_35 <- ALLCITIES$B19001_001 * ((ALLCITIES$ReverseGroup30_35)*log2(1/(ALLCITIES$ReverseGroup30_35)) + 
                                                            (1-(ALLCITIES$ReverseGroup30_35))*log2(1/(1-(ALLCITIES$ReverseGroup30_35))))

ALLCITIES$ReverseLocalEnt35_40 <- ALLCITIES$B19001_001 * ((ALLCITIES$ReverseGroup35_40)*log2(1/(ALLCITIES$ReverseGroup35_40)) + 
                                                            (1-(ALLCITIES$ReverseGroup35_40))*log2(1/(1-(ALLCITIES$ReverseGroup35_40))))

ALLCITIES$ReverseLocalEnt40_45 <- ALLCITIES$B19001_001 * ((ALLCITIES$ReverseGroup40_45)*log2(1/(ALLCITIES$ReverseGroup40_45)) + 
                                                            (1-(ALLCITIES$ReverseGroup40_45))*log2(1/(1-(ALLCITIES$ReverseGroup40_45))))

#HA stuff Total

ALLCITIESTOTALS <- ALLCITIES %>%
  group_by(city) %>%
  summarise_at(vars(B19001_001,B19001_002,B19001_003,B19001_004,B19001_005,B19001_006,B19001_007,B19001_008,B19001_009,B19001_010,
                    B19001_011,B19001_012,B19001_013,B19001_014,B19001_015,B19001_016,B19001_017), list(name = sum))

TOTALS <- ALLCITIESTOTALS %>%
  rename(MSAB19001_001 = B19001_001_name, MSAB19001_002 = B19001_002_name, MSAB19001_003 = B19001_003_name, MSAB19001_004 = B19001_004_name,
         MSAB19001_005 = B19001_005_name, MSAB19001_006 = B19001_006_name, MSAB19001_007 = B19001_007_name, MSAB19001_008 = B19001_008_name,
         MSAB19001_009 = B19001_009_name, MSAB19001_010 = B19001_010_name, MSAB19001_011 = B19001_011_name, MSAB19001_012 = B19001_012_name,
         MSAB19001_013 = B19001_013_name, MSAB19001_014 = B19001_014_name, MSAB19001_015 = B19001_015_name, MSAB19001_016 = B19001_016_name,
         MSAB19001_017 = B19001_017_name)


TOTALS$MSAGroup200 <- (TOTALS$MSAB19001_017/TOTALS$MSAB19001_001)
TOTALS$MSAGroup150_200 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup125_150 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup100_125 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup75_100 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup60_75 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup50_60 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup45_50 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_010)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup40_45 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_009)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup35_40 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_008)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup30_35 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_007)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup25_30 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_006)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup20_25 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_005)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup15_20 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_004)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup10_15 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_003)/TOTALS$MSAB19001_001;
TOTALS$MSAGroup10 <- (TOTALS$MSAB19001_017 + TOTALS$MSAB19001_016 + TOTALS$MSAB19001_015 + TOTALS$MSAB19001_014 + TOTALS$MSAB19001_013 + TOTALS$MSAB19001_012 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_002)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup10 <- (TOTALS$MSAB19001_002)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup10_15 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup15_20 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_004)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup20_25 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_005)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup25_30 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_006)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup30_35 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_007)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup35_40 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_008)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup40_45 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_009)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup45_50 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_010)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup50_60 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_011)/TOTALS$MSAB19001_001;
TOTALS$ReverseMSAGroup60_75 <- (TOTALS$MSAB19001_002 + TOTALS$MSAB19001_003 + TOTALS$MSAB19001_004 + TOTALS$MSAB19001_005 + TOTALS$MSAB19001_006 + TOTALS$MSAB19001_007 + TOTALS$MSAB19001_008 + TOTALS$MSAB19001_009 + TOTALS$MSAB19001_010 + TOTALS$MSAB19001_011 + TOTALS$MSAB19001_012)/TOTALS$MSAB19001_001;

TOTALS$TotalEnt200 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup200)*log2(1/(TOTALS$MSAGroup200)) + 
                                                (1-(TOTALS$MSAGroup200))*log2(1/(1-(TOTALS$MSAGroup200))))

TOTALS$TotalEnt150_200 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup150_200)*log2(1/(TOTALS$MSAGroup150_200)) + 
                                                    (1-(TOTALS$MSAGroup150_200))*log2(1/(1-(TOTALS$MSAGroup150_200))))

TOTALS$TotalEnt125_150 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup125_150)*log2(1/(TOTALS$MSAGroup125_150)) + 
                                                    (1-(TOTALS$MSAGroup125_150))*log2(1/(1-(TOTALS$MSAGroup125_150))))

TOTALS$TotalEnt100_125 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup100_125)*log2(1/(TOTALS$MSAGroup100_125)) + 
                                                    (1-(TOTALS$MSAGroup100_125))*log2(1/(1-(TOTALS$MSAGroup100_125))))

TOTALS$TotalEnt75_100 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup75_100)*log2(1/(TOTALS$MSAGroup75_100)) + 
                                                   (1-(TOTALS$MSAGroup75_100))*log2(1/(1-(TOTALS$MSAGroup75_100))))

TOTALS$TotalEnt60_75 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup60_75)*log2(1/(TOTALS$MSAGroup60_75)) + 
                                                  (1-(TOTALS$MSAGroup60_75))*log2(1/(1-(TOTALS$MSAGroup60_75))))

TOTALS$TotalEnt50_60 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup50_60)*log2(1/(TOTALS$MSAGroup50_60)) + 
                                                  (1-(TOTALS$MSAGroup50_60))*log2(1/(1-(TOTALS$MSAGroup50_60))))

TOTALS$TotalEnt45_50 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup45_50)*log2(1/(TOTALS$MSAGroup45_50)) + 
                                                  (1-(TOTALS$MSAGroup45_50))*log2(1/(1-(TOTALS$MSAGroup45_50))))

TOTALS$TotalEnt40_45 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup40_45)*log2(1/(TOTALS$MSAGroup40_45)) + 
                                                  (1-(TOTALS$MSAGroup40_45))*log2(1/(1-(TOTALS$MSAGroup40_45))))

TOTALS$TotalEnt35_40 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup35_40)*log2(1/(TOTALS$MSAGroup35_40)) + 
                                                  (1-(TOTALS$MSAGroup35_40))*log2(1/(1-(TOTALS$MSAGroup35_40))))

TOTALS$TotalEnt30_35 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup30_35)*log2(1/(TOTALS$MSAGroup30_35)) + 
                                                  (1-(TOTALS$MSAGroup30_35))*log2(1/(1-(TOTALS$MSAGroup30_35))))

TOTALS$TotalEnt25_30 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup25_30)*log2(1/(TOTALS$MSAGroup25_30)) + 
                                                  (1-(TOTALS$MSAGroup25_30))*log2(1/(1-(TOTALS$MSAGroup25_30))))

TOTALS$TotalEnt20_25 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup20_25)*log2(1/(TOTALS$MSAGroup20_25)) + 
                                                  (1-(TOTALS$MSAGroup20_25))*log2(1/(1-(TOTALS$MSAGroup20_25))))

TOTALS$TotalEnt15_20 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup15_20)*log2(1/(TOTALS$MSAGroup15_20)) + 
                                                  (1-(TOTALS$MSAGroup15_20))*log2(1/(1-(TOTALS$MSAGroup15_20))))

TOTALS$TotalEnt10_15 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup10_15)*log2(1/(TOTALS$MSAGroup10_15)) + 
                                                  (1-(TOTALS$MSAGroup10_15))*log2(1/(1-(TOTALS$MSAGroup10_15))))

TOTALS$TotalEnt10 <- TOTALS$MSAB19001_001 * ((TOTALS$MSAGroup10)*log2(1/(TOTALS$MSAGroup10)) + 
                                               (1-(TOTALS$MSAGroup10))*log2(1/(1-(TOTALS$MSAGroup10))))

TOTALS$ReverseTotalEnt10 <- TOTALS$MSAB19001_001 * ((TOTALS$ReverseMSAGroup10)*log2(1/(TOTALS$ReverseMSAGroup10)) + 
                                                      (1-(TOTALS$ReverseMSAGroup10))*log2(1/(1-(TOTALS$ReverseMSAGroup10))))

TOTALS$ReverseTotalEnt10_15 <- TOTALS$MSAB19001_001 * ((TOTALS$ReverseMSAGroup10_15)*log2(1/(TOTALS$ReverseMSAGroup10_15)) + 
                                                         (1-(TOTALS$ReverseMSAGroup10_15))*log2(1/(1-(TOTALS$ReverseMSAGroup10_15))))

TOTALS$ReverseTotalEnt15_20 <- TOTALS$MSAB19001_001 * ((TOTALS$ReverseMSAGroup15_20)*log2(1/(TOTALS$ReverseMSAGroup15_20)) + 
                                                         (1-(TOTALS$ReverseMSAGroup15_20))*log2(1/(1-(TOTALS$ReverseMSAGroup15_20))))

TOTALS$ReverseTotalEnt20_25 <- TOTALS$MSAB19001_001 * ((TOTALS$ReverseMSAGroup20_25)*log2(1/(TOTALS$ReverseMSAGroup20_25)) + 
                                                         (1-(TOTALS$ReverseMSAGroup20_25))*log2(1/(1-(TOTALS$ReverseMSAGroup20_25))))

TOTALS$ReverseTotalEnt25_30 <- TOTALS$MSAB19001_001 * ((TOTALS$ReverseMSAGroup25_30)*log2(1/(TOTALS$ReverseMSAGroup25_30)) + 
                                                         (1-(TOTALS$ReverseMSAGroup25_30))*log2(1/(1-(TOTALS$ReverseMSAGroup25_30))))

TOTALS$ReverseTotalEnt30_35 <- TOTALS$MSAB19001_001 * ((TOTALS$ReverseMSAGroup30_35)*log2(1/(TOTALS$ReverseMSAGroup30_35)) + 
                                                         (1-(TOTALS$ReverseMSAGroup30_35))*log2(1/(1-(TOTALS$ReverseMSAGroup30_35))))

TOTALS$ReverseTotalEnt35_40 <- TOTALS$MSAB19001_001 * ((TOTALS$ReverseMSAGroup35_40)*log2(1/(TOTALS$ReverseMSAGroup35_40)) + 
                                                         (1-(TOTALS$ReverseMSAGroup35_40))*log2(1/(1-(TOTALS$ReverseMSAGroup35_40))))

TOTALS$ReverseTotalEnt40_45 <- TOTALS$MSAB19001_001 * ((TOTALS$ReverseMSAGroup40_45)*log2(1/(TOTALS$ReverseMSAGroup40_45)) + 
                                                         (1-(TOTALS$ReverseMSAGroup40_45))*log2(1/(1-(TOTALS$ReverseMSAGroup40_45))))

#Entropy calculation
TOTALS$E200 <- ((TOTALS$MSAGroup200)*log2(1/(TOTALS$MSAGroup200)) + (1-(TOTALS$MSAGroup200))*log2(1/(1-(TOTALS$MSAGroup200))))
TOTALS$E150_200 <- ((TOTALS$MSAGroup150_200)*log2(1/(TOTALS$MSAGroup150_200)) + (1-(TOTALS$MSAGroup150_200))*log2(1/(1-(TOTALS$MSAGroup150_200))))
TOTALS$E125_150 <- ((TOTALS$MSAGroup125_150)*log2(1/(TOTALS$MSAGroup125_150)) + (1-(TOTALS$MSAGroup125_150))*log2(1/(1-(TOTALS$MSAGroup125_150))))
TOTALS$E100_125 <- ((TOTALS$MSAGroup100_125)*log2(1/(TOTALS$MSAGroup100_125)) + (1-(TOTALS$MSAGroup100_125))*log2(1/(1-(TOTALS$MSAGroup100_125))))
TOTALS$E75_100 <- ((TOTALS$MSAGroup75_100)*log2(1/(TOTALS$MSAGroup75_100)) + (1-(TOTALS$MSAGroup75_100))*log2(1/(1-(TOTALS$MSAGroup75_100))))
TOTALS$E60_75 <- ((TOTALS$MSAGroup60_75)*log2(1/(TOTALS$MSAGroup60_75)) + (1-(TOTALS$MSAGroup60_75))*log2(1/(1-(TOTALS$MSAGroup60_75))))
TOTALS$E50_60 <- ((TOTALS$MSAGroup50_60)*log2(1/(TOTALS$MSAGroup50_60)) + (1-(TOTALS$MSAGroup50_60))*log2(1/(1-(TOTALS$MSAGroup50_60))))
TOTALS$E50_60 <- ((TOTALS$MSAGroup50_60)*log2(1/(TOTALS$MSAGroup50_60)) + (1-(TOTALS$MSAGroup50_60))*log2(1/(1-(TOTALS$MSAGroup50_60))))
TOTALS$E45_50 <- ((TOTALS$MSAGroup45_50)*log2(1/(TOTALS$MSAGroup45_50)) + (1-(TOTALS$MSAGroup45_50))*log2(1/(1-(TOTALS$MSAGroup45_50))))
TOTALS$E40_45 <- ((TOTALS$MSAGroup40_45)*log2(1/(TOTALS$MSAGroup40_45)) + (1-(TOTALS$MSAGroup40_45))*log2(1/(1-(TOTALS$MSAGroup40_45))))
TOTALS$E35_40 <- ((TOTALS$MSAGroup35_40)*log2(1/(TOTALS$MSAGroup35_40)) + (1-(TOTALS$MSAGroup35_40))*log2(1/(1-(TOTALS$MSAGroup35_40))))
TOTALS$E30_35 <- ((TOTALS$MSAGroup30_35)*log2(1/(TOTALS$MSAGroup30_35)) + (1-(TOTALS$MSAGroup30_35))*log2(1/(1-(TOTALS$MSAGroup30_35))))
TOTALS$E25_30 <- ((TOTALS$MSAGroup25_30)*log2(1/(TOTALS$MSAGroup25_30)) + (1-(TOTALS$MSAGroup25_30))*log2(1/(1-(TOTALS$MSAGroup25_30))))
TOTALS$E20_25 <- ((TOTALS$MSAGroup20_25)*log2(1/(TOTALS$MSAGroup20_25)) + (1-(TOTALS$MSAGroup20_25))*log2(1/(1-(TOTALS$MSAGroup20_25))))
TOTALS$E15_20 <- ((TOTALS$MSAGroup15_20)*log2(1/(TOTALS$MSAGroup15_20)) + (1-(TOTALS$MSAGroup15_20))*log2(1/(1-(TOTALS$MSAGroup15_20))))
TOTALS$E10_15 <- ((TOTALS$MSAGroup10_15)*log2(1/(TOTALS$MSAGroup10_15)) + (1-(TOTALS$MSAGroup10_15))*log2(1/(1-(TOTALS$MSAGroup10_15))))
TOTALS$E10 <- ((TOTALS$MSAGroup10)*log2(1/(TOTALS$MSAGroup10)) + (1-(TOTALS$MSAGroup10))*log2(1/(1-(TOTALS$MSAGroup10))))
TOTALS$ReverseE10 <- ((TOTALS$ReverseMSAGroup10)*log2(1/(TOTALS$ReverseMSAGroup10)) + (1-(TOTALS$ReverseMSAGroup10))*log2(1/(1-(TOTALS$ReverseMSAGroup10))))
TOTALS$ReverseE10_15 <- ((TOTALS$ReverseMSAGroup10_15)*log2(1/(TOTALS$ReverseMSAGroup10_15)) + (1-(TOTALS$ReverseMSAGroup10_15))*log2(1/(1-(TOTALS$ReverseMSAGroup10_15))))
TOTALS$ReverseE15_20 <- ((TOTALS$ReverseMSAGroup15_20)*log2(1/(TOTALS$ReverseMSAGroup15_20)) + (1-(TOTALS$ReverseMSAGroup15_20))*log2(1/(1-(TOTALS$ReverseMSAGroup15_20))))
TOTALS$ReverseE20_25 <- ((TOTALS$ReverseMSAGroup20_25)*log2(1/(TOTALS$ReverseMSAGroup20_25)) + (1-(TOTALS$ReverseMSAGroup20_25))*log2(1/(1-(TOTALS$ReverseMSAGroup20_25))))
TOTALS$ReverseE25_30 <- ((TOTALS$ReverseMSAGroup25_30)*log2(1/(TOTALS$ReverseMSAGroup25_30)) + (1-(TOTALS$ReverseMSAGroup25_30))*log2(1/(1-(TOTALS$ReverseMSAGroup25_30))))
TOTALS$ReverseE30_35 <- ((TOTALS$ReverseMSAGroup30_35)*log2(1/(TOTALS$ReverseMSAGroup30_35)) + (1-(TOTALS$ReverseMSAGroup30_35))*log2(1/(1-(TOTALS$ReverseMSAGroup30_35))))
TOTALS$ReverseE35_40 <- ((TOTALS$ReverseMSAGroup35_40)*log2(1/(TOTALS$ReverseMSAGroup35_40)) + (1-(TOTALS$ReverseMSAGroup35_40))*log2(1/(1-(TOTALS$ReverseMSAGroup35_40))))
TOTALS$ReverseE40_45 <- ((TOTALS$ReverseMSAGroup40_45)*log2(1/(TOTALS$ReverseMSAGroup40_45)) + (1-(TOTALS$ReverseMSAGroup40_45))*log2(1/(1-(TOTALS$ReverseMSAGroup40_45))))

ALLCITIES <- ALLCITIES %>%
  left_join(TOTALS, by = c("city" = "city"))

ALLCITIES$Section200 <- ALLCITIES$LocalEnt200 / ALLCITIES$TotalEnt200
ALLCITIES$Section150_200 <- ALLCITIES$LocalEnt150_200 / ALLCITIES$TotalEnt150_200
ALLCITIES$Section125_150 <- ALLCITIES$LocalEnt125_150 / ALLCITIES$TotalEnt125_150
ALLCITIES$Section100_125 <- ALLCITIES$LocalEnt100_125 / ALLCITIES$TotalEnt100_125
ALLCITIES$Section75_100 <- ALLCITIES$LocalEnt75_100 / ALLCITIES$TotalEnt75_100
ALLCITIES$Section60_75 <- ALLCITIES$LocalEnt60_75 / ALLCITIES$TotalEnt60_75
ALLCITIES$Section50_60 <- ALLCITIES$LocalEnt50_60 / ALLCITIES$TotalEnt50_60
ALLCITIES$Section45_50 <- ALLCITIES$LocalEnt45_50 / ALLCITIES$TotalEnt45_50
ALLCITIES$Section40_45 <- ALLCITIES$LocalEnt40_45 / ALLCITIES$TotalEnt40_45
ALLCITIES$Section35_40 <- ALLCITIES$LocalEnt35_40 / ALLCITIES$TotalEnt35_40
ALLCITIES$Section30_35 <- ALLCITIES$LocalEnt30_35 / ALLCITIES$TotalEnt30_35
ALLCITIES$Section25_30 <- ALLCITIES$LocalEnt25_30 / ALLCITIES$TotalEnt25_30
ALLCITIES$Section20_25 <- ALLCITIES$LocalEnt20_25 / ALLCITIES$TotalEnt20_25
ALLCITIES$Section15_20 <- ALLCITIES$LocalEnt15_20 / ALLCITIES$TotalEnt15_20
ALLCITIES$Section10_15 <- ALLCITIES$LocalEnt10_15 / ALLCITIES$TotalEnt10_15
ALLCITIES$Section10 <- ALLCITIES$LocalEnt10 / ALLCITIES$TotalEnt10
ALLCITIES$ReverseSection10 <- ALLCITIES$ReverseLocalEnt10 / ALLCITIES$ReverseTotalEnt10
ALLCITIES$ReverseSection10_15 <- ALLCITIES$ReverseLocalEnt10_15 / ALLCITIES$ReverseTotalEnt10_15
ALLCITIES$ReverseSection15_20 <- ALLCITIES$ReverseLocalEnt15_20 / ALLCITIES$ReverseTotalEnt15_20
ALLCITIES$ReverseSection20_25 <- ALLCITIES$ReverseLocalEnt20_25 / ALLCITIES$ReverseTotalEnt20_25
ALLCITIES$ReverseSection25_30 <- ALLCITIES$ReverseLocalEnt25_30 / ALLCITIES$ReverseTotalEnt25_30
ALLCITIES$ReverseSection30_35 <- ALLCITIES$ReverseLocalEnt30_35 / ALLCITIES$ReverseTotalEnt30_35
ALLCITIES$ReverseSection35_40 <- ALLCITIES$ReverseLocalEnt35_40 / ALLCITIES$ReverseTotalEnt35_40
ALLCITIES$ReverseSection40_45 <- ALLCITIES$ReverseLocalEnt40_45 / ALLCITIES$ReverseTotalEnt40_45

#You cannot sum with NaN's, they need to be replaced with 0's
ALLCITIES[is.na(ALLCITIES)] <- 0


ALLCITIESECTION <- ALLCITIES %>%
  group_by(city) %>%
  summarise_at(vars(Section200, Section150_200, Section125_150, Section100_125,
                    Section75_100, Section60_75, Section50_60, Section45_50, 
                    Section40_45, Section35_40, Section30_35, Section25_30, 
                    Section20_25, Section15_20, Section10_15, Section10, 
                    ReverseSection10, ReverseSection10_15, ReverseSection15_20, 
                    ReverseSection20_25, ReverseSection25_30, ReverseSection30_35, 
                    ReverseSection35_40, ReverseSection40_45), list(name = sum))

SECTION <- ALLCITIESECTION %>%
  rename(Section200 = Section200_name, Section150_200 = Section150_200_name, Section125_150 = Section125_150_name, Section100_125 = Section100_125_name,
         Section75_100 = Section75_100_name, Section60_75 = Section60_75_name, Section50_60 = Section50_60_name, Section45_50 = Section45_50_name,
         Section40_45 = Section40_45_name, Section35_40 = Section35_40_name, Section30_35 = Section30_35_name, Section25_30 = Section25_30_name,
         Section20_25 = Section20_25_name, Section15_20 = Section15_20_name, Section10_15 = Section10_15_name, Section10 = Section10_name,
         ReverseSection10 = ReverseSection10_name, ReverseSection10_15 = ReverseSection10_15_name, ReverseSection15_20 = ReverseSection15_20_name, 
         ReverseSection20_25 = ReverseSection20_25_name, ReverseSection25_30 = ReverseSection25_30_name, ReverseSection30_35 = ReverseSection30_35_name, 
         ReverseSection35_40 = ReverseSection35_40_name, ReverseSection40_45 = ReverseSection40_45_name)


TOTALS2 <- TOTALS %>%
  left_join(SECTION, by = c("city" = "city"))

TOTALS2$Percent200 <- 1 - TOTALS2$Section200
TOTALS2$Percent150_200 <- 1 - TOTALS2$Section150_200
TOTALS2$Percent125_150 <- 1 - TOTALS2$Section125_150
TOTALS2$Percent100_125 <- 1 - TOTALS2$Section100_125
TOTALS2$Percent75_100 <- 1 - TOTALS2$Section75_100
TOTALS2$Percent60_75 <- 1 - TOTALS2$Section60_75
TOTALS2$Percent50_60 <- 1 - TOTALS2$Section50_60
TOTALS2$Percent45_50 <- 1 - TOTALS2$Section45_50
TOTALS2$Percent40_45 <- 1 - TOTALS2$Section40_45
TOTALS2$Percent35_40 <- 1 - TOTALS2$Section35_40
TOTALS2$Percent30_35 <- 1 - TOTALS2$Section30_35
TOTALS2$Percent25_30 <- 1 - TOTALS2$Section25_30
TOTALS2$Percent20_25 <- 1 - TOTALS2$Section20_25
TOTALS2$Percent15_20 <- 1 - TOTALS2$Section15_20
TOTALS2$Percent10_15 <- 1 - TOTALS2$Section10_15
TOTALS2$Percent10 <- 1 - TOTALS2$Section10
TOTALS2$ReversePercent10 <- 1 - TOTALS2$ReverseSection10
TOTALS2$ReversePercent10_15 <- 1 - TOTALS2$ReverseSection10_15
TOTALS2$ReversePercent15_20 <- 1 - TOTALS2$ReverseSection15_20
TOTALS2$ReversePercent20_25 <- 1 - TOTALS2$ReverseSection20_25
TOTALS2$ReversePercent25_30 <- 1 - TOTALS2$ReverseSection25_30
TOTALS2$ReversePercent30_35 <- 1 - TOTALS2$ReverseSection30_35
TOTALS2$ReversePercent35_40 <- 1 - TOTALS2$ReverseSection35_40
TOTALS2$ReversePercent40_45 <- 1 - TOTALS2$ReverseSection40_45


TOTALS2$Weight200 <- as.numeric(TOTALS2$E200 * TOTALS2$Percent200)
TOTALS2$Weight150_200 <- as.numeric(TOTALS2$E150_200 * TOTALS2$Percent150_200)
TOTALS2$Weight125_150 <- as.numeric(TOTALS2$E125_150 * TOTALS2$Percent125_150) 
TOTALS2$Weight100_125 <- as.numeric(TOTALS2$E100_125 * TOTALS2$Percent100_125) 
TOTALS2$Weight75_100 <- as.numeric(TOTALS2$E75_100 * TOTALS2$Percent75_100)
TOTALS2$Weight60_75 <- as.numeric(TOTALS2$E60_75 * TOTALS2$Percent60_75) 
TOTALS2$Weight50_60 <- as.numeric(TOTALS2$E50_60 * TOTALS2$Percent50_60) 
TOTALS2$Weight45_50 <- as.numeric(TOTALS2$E45_50 * TOTALS2$Percent45_50)
TOTALS2$Weight40_45 <- as.numeric(TOTALS2$E40_45 * TOTALS2$Percent40_45) 
TOTALS2$Weight35_40 <- as.numeric(TOTALS2$E35_40 * TOTALS2$Percent35_40) 
TOTALS2$Weight30_35 <- as.numeric(TOTALS2$E30_35 * TOTALS2$Percent30_35)
TOTALS2$Weight25_30 <- as.numeric(TOTALS2$E25_30 * TOTALS2$Percent25_30) 
TOTALS2$Weight20_25 <- as.numeric(TOTALS2$E20_25 * TOTALS2$Percent20_25)
TOTALS2$Weight15_20 <- as.numeric(TOTALS2$E15_20 * TOTALS2$Percent15_20) 
TOTALS2$Weight10_15 <- as.numeric(TOTALS2$E10_15 * TOTALS2$Percent10_15) 
TOTALS2$Weight10 <- as.numeric(TOTALS2$E10 * TOTALS2$Percent10) 
TOTALS2$ReverseWeight10 <- as.numeric(TOTALS2$ReverseE10 * TOTALS2$ReversePercent10)
TOTALS2$ReverseWeight10_15 <- as.numeric(TOTALS2$ReverseE10_15 * TOTALS2$ReversePercent10_15)
TOTALS2$ReverseWeight15_20 <- as.numeric(TOTALS2$ReverseE15_20 * TOTALS2$ReversePercent15_20)
TOTALS2$ReverseWeight20_25 <- as.numeric(TOTALS2$ReverseE20_25 * TOTALS2$ReversePercent20_25)
TOTALS2$ReverseWeight25_30 <- as.numeric(TOTALS2$ReverseE25_30 * TOTALS2$ReversePercent25_30)
TOTALS2$ReverseWeight30_35 <- as.numeric(TOTALS2$ReverseE30_35 * TOTALS2$ReversePercent30_35)
TOTALS2$ReverseWeight35_40 <- as.numeric(TOTALS2$ReverseE35_40 * TOTALS2$ReversePercent35_40)
TOTALS2$ReverseWeight40_45 <- as.numeric(TOTALS2$ReverseE40_45 * TOTALS2$ReversePercent40_45)


#HA statistic, omitting column 153 since NaN
TOTALS2$HAPart <- rowMeans(TOTALS2[,142:156])
TOTALS2$HA <- TOTALS2$HAPart * (2*log(2))

#TO FIGURE OUT HA10, HA20, YOU NEED TO LOOK AT MSAGROUP TO FIGURE OUT PERCENTS

TOTALS2$HAPARTTop10 <- ifelse((TOTALS2[,19]) > 0.09,rowMeans(TOTALS2[,142:142]),
                             ifelse((TOTALS2[,20]) > 0.09, rowMeans(TOTALS2[,142:143]),
                                    ifelse((TOTALS2[,21]) > 0.09, rowMeans(TOTALS2[,142:144]),"Uhh"
                                    )))

TOTALS2$HATop10 <- TOTALS2$HAPARTTop10 * (2*log(2))

TOTALS2$HAPARTTop20 <- ifelse((TOTALS2[,19]) > 0.19,rowMeans(TOTALS2[,142:142]),
                             ifelse((TOTALS2[,20]) > 0.19,rowMeans(TOTALS2[,142:143]),
                                    ifelse((TOTALS2[,21]) > 0.19,rowMeans(TOTALS2[,142:144]),
                                           ifelse((TOTALS2[,22]) > 0.19,rowMeans(TOTALS2[,142:145]),"Uhh"
                                           ))))
TOTALS2$HATop20 <- TOTALS2$HAPARTTop20 * (2*log(2))

TOTALS2$HAPARTBottom20 <- ifelse((TOTALS2[,35]) > 0.19,rowMeans(TOTALS2[,158:158]),
                                ifelse((TOTALS2[,36]) > 0.19,rowMeans(TOTALS2[,158:159]),
                                       ifelse((TOTALS2[,37]) > 0.19,rowMeans(TOTALS2[,158:160]),
                                              ifelse((TOTALS2[,38]) > 0.19,rowMeans(TOTALS2[,158:161]),
                                                     ifelse((TOTALS2[,39]) > 0.19,rowMeans(TOTALS2[,158:162]),
                                                            ifelse((TOTALS2[,40]) > 0.19,rowMeans(TOTALS2[,158:163]),
                                                                   ifelse((TOTALS2[,41]) > 0.19,rowMeans(TOTALS2[,158:164]),
                                                                          ifelse((TOTALS2[,42]) > 0.19,rowMeans(TOTALS2[,158:165]),"Uhh"
                                                                   ))))))))
TOTALS2$HABottom20 <- TOTALS2$HAPARTBottom20 * (2*log(2))


TOTALS2$HAPARTBottom10 <- ifelse((TOTALS2[,35]) > 0.09,rowMeans(TOTALS2[,158:158]),
                                ifelse((TOTALS2[,36]) > 0.09,rowMeans(TOTALS2[,158:159]),
                                       ifelse((TOTALS2[,37]) > 0.09,rowMeans(TOTALS2[,158:160]),
                                              ifelse((TOTALS2[,38]) > 0.09,rowMeans(TOTALS2[,158:161]),
                                                     ifelse((TOTALS2[,39]) > 0.09,rowMeans(TOTALS2[,158:162]),
                                                            ifelse((TOTALS2[,40]) > 0.09,rowMeans(TOTALS2[,158:163]),
                                                                   ifelse((TOTALS2[,41]) > 0.09,rowMeans(TOTALS2[,158:164]),"Uhh"
                                                                   )))))))
TOTALS2$HABottom10 <- TOTALS2$HAPARTBottom10 * (2*log(2))


#Creating yearly information

HA2018 <- TOTALS2 %>%
  select (city, HA, HATop10, HATop20, HABottom20, HABottom10)

HA2018 <- add_column(HA2018, year = "2018")


#Once you get years 2013 - 2018

HATotal <- rbind(HA2013,HA2014,HA2015,HA2016,HA2017,HA2018)





#Uhhh

#Create shapefile, then convert to simple sf
DCGeom <- block_groups(state = "DC")
VAGeom <- block_groups(state = "VA", county = VADCCounties)
MDGeom <- block_groups(state = "MD", county = MDDCCounties)
WVGeom <- block_groups(state = "WV", county = WVDCCounties)

DCAll <- raster::bind(DCGeom,VAGeom,MDGeom,WVGeom)
plot(DCAll)

DCAll@data = data.frame(DCAll@data,DC[match(DCAll@data$GEOID, DC$GEOID),])

DCMAP_m_nbq <- poly2nb(DCAll, queen=T)
MAP2_m_nbq_w <- nb2listw(DCMAP_m_nbq, style="W", zero.policy = TRUE)

moransEmployDense <- moran.test(MAP2$CalcWLR2, MAP2.dists.dnb, zero.policy = TRUE)
moransEmployDense





#https://stackoverflow.com/questions/29357612/plot-labels-at-ends-of-lines

ggplot(HATotal, aes(x = year, y = HA, color=city, group = city)) + 
  geom_line(size = 1) + 
  geom_point(size = 3, shape=21, color = "darkred", fill = 'grey') +
  scale_color_discrete(guide = 'none') +
  geom_dl(aes(label = city), method = list(dl.trans(x = x + 0.2),"last.points", cex = 0.8))




